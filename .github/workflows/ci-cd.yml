name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest --cov=src tests/
    
    - name: Validate Terraform
      run: |
        cd terraform
        terraform init -backend=false
        terraform validate
    
    # Etapas de CD come√ßam aqui
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/devops-app:${{ github.sha }},${{ secrets.DOCKER_HUB_USERNAME }}/devops-app:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/devops-app:latest
        cache-to: type=inline
  
  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Run SAST with SonarQube
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'devops-app'
        path: '.'
        format: 'HTML'
        out: 'reports'
    
    - name: Run Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/devops-app:${{ github.sha }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
  
  deploy-staging:
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Deploy to Staging
      run: |
        chmod +x deploy/scripts/deploy-to-staging.sh
        ./deploy/scripts/deploy-to-staging.sh ${{ github.sha }}
    
    - name: Setup Monitoring and Logging
      run: |
        chmod +x monitoring/setup-monitoring.sh
        chmod +x logging/setup-logging.sh
        ./monitoring/setup-monitoring.sh
        ./logging/setup-logging.sh
    
    - name: Run Acceptance Tests
      run: |
        chmod +x tests/run-acceptance-tests.sh
        ./tests/run-acceptance-tests.sh
  
  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://app.example.com
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Deploy to Production
      run: |
        chmod +x deploy/scripts/deploy-to-production.sh
        ./deploy/scripts/deploy-to-production.sh ${{ github.sha }}
    
    - name: Run Smoke Tests
      run: |
        chmod +x tests/run-smoke-tests.sh
        ./tests/run-smoke-tests.sh
    
    - name: Monitor Deployment
      run: |
        chmod +x monitoring/check-deployment-health.sh
        ./monitoring/check-deployment-health.sh devops-app-production devops-app
